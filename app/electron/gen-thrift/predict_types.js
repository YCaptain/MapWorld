//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var Exception = module.exports.Exception = function(args) {
  Thrift.TException.call(this, "Exception");
  this.name = "Exception";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(Exception, Thrift.TException);
Exception.prototype.name = 'Exception';
Exception.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Exception.prototype.write = function(output) {
  output.writeStructBegin('Exception');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InitRequest = module.exports.InitRequest = function(args) {
  this.config_path = null;
  this.fr_addr = null;
  this.fr_port = null;
  if (args) {
    if (args.config_path !== undefined && args.config_path !== null) {
      this.config_path = args.config_path;
    }
    if (args.fr_addr !== undefined && args.fr_addr !== null) {
      this.fr_addr = args.fr_addr;
    }
    if (args.fr_port !== undefined && args.fr_port !== null) {
      this.fr_port = args.fr_port;
    }
  }
};
InitRequest.prototype = {};
InitRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.config_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fr_addr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.fr_port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InitRequest.prototype.write = function(output) {
  output.writeStructBegin('InitRequest');
  if (this.config_path !== null && this.config_path !== undefined) {
    output.writeFieldBegin('config_path', Thrift.Type.STRING, 1);
    output.writeString(this.config_path);
    output.writeFieldEnd();
  }
  if (this.fr_addr !== null && this.fr_addr !== undefined) {
    output.writeFieldBegin('fr_addr', Thrift.Type.STRING, 2);
    output.writeString(this.fr_addr);
    output.writeFieldEnd();
  }
  if (this.fr_port !== null && this.fr_port !== undefined) {
    output.writeFieldBegin('fr_port', Thrift.Type.I32, 3);
    output.writeI32(this.fr_port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var XY = module.exports.XY = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
  }
};
XY.prototype = {};
XY.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XY.prototype.write = function(output) {
  output.writeStructBegin('XY');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GeoMeta = module.exports.GeoMeta = function(args) {
  this.origin = null;
  this.pixel_size = null;
  if (args) {
    if (args.origin !== undefined && args.origin !== null) {
      this.origin = new ttypes.XY(args.origin);
    }
    if (args.pixel_size !== undefined && args.pixel_size !== null) {
      this.pixel_size = new ttypes.XY(args.pixel_size);
    }
  }
};
GeoMeta.prototype = {};
GeoMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.origin = new ttypes.XY();
        this.origin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel_size = new ttypes.XY();
        this.pixel_size.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeoMeta.prototype.write = function(output) {
  output.writeStructBegin('GeoMeta');
  if (this.origin !== null && this.origin !== undefined) {
    output.writeFieldBegin('origin', Thrift.Type.STRUCT, 1);
    this.origin.write(output);
    output.writeFieldEnd();
  }
  if (this.pixel_size !== null && this.pixel_size !== undefined) {
    output.writeFieldBegin('pixel_size', Thrift.Type.STRUCT, 2);
    this.pixel_size.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PredRequest = module.exports.PredRequest = function(args) {
  this.imgs_path = null;
  this.imgs_meta = null;
  this.model_name = null;
  this.n_gpu_use = null;
  this.tmp_opt_path = null;
  this.prescale = null;
  this.batch_size = null;
  if (args) {
    if (args.imgs_path !== undefined && args.imgs_path !== null) {
      this.imgs_path = Thrift.copyList(args.imgs_path, [null]);
    }
    if (args.imgs_meta !== undefined && args.imgs_meta !== null) {
      this.imgs_meta = Thrift.copyList(args.imgs_meta, [ttypes.GeoMeta]);
    }
    if (args.model_name !== undefined && args.model_name !== null) {
      this.model_name = args.model_name;
    }
    if (args.n_gpu_use !== undefined && args.n_gpu_use !== null) {
      this.n_gpu_use = args.n_gpu_use;
    }
    if (args.tmp_opt_path !== undefined && args.tmp_opt_path !== null) {
      this.tmp_opt_path = args.tmp_opt_path;
    }
    if (args.prescale !== undefined && args.prescale !== null) {
      this.prescale = args.prescale;
    }
    if (args.batch_size !== undefined && args.batch_size !== null) {
      this.batch_size = args.batch_size;
    }
  }
};
PredRequest.prototype = {};
PredRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.imgs_path = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.imgs_path.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.imgs_meta = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = new ttypes.GeoMeta();
          elem7.read(input);
          this.imgs_meta.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.model_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.n_gpu_use = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.tmp_opt_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.prescale = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BYTE) {
        this.batch_size = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PredRequest.prototype.write = function(output) {
  output.writeStructBegin('PredRequest');
  if (this.imgs_path !== null && this.imgs_path !== undefined) {
    output.writeFieldBegin('imgs_path', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.imgs_path.length);
    for (var iter8 in this.imgs_path) {
      if (this.imgs_path.hasOwnProperty(iter8)) {
        iter8 = this.imgs_path[iter8];
        output.writeString(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.imgs_meta !== null && this.imgs_meta !== undefined) {
    output.writeFieldBegin('imgs_meta', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.imgs_meta.length);
    for (var iter9 in this.imgs_meta) {
      if (this.imgs_meta.hasOwnProperty(iter9)) {
        iter9 = this.imgs_meta[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.model_name !== null && this.model_name !== undefined) {
    output.writeFieldBegin('model_name', Thrift.Type.STRING, 3);
    output.writeString(this.model_name);
    output.writeFieldEnd();
  }
  if (this.n_gpu_use !== null && this.n_gpu_use !== undefined) {
    output.writeFieldBegin('n_gpu_use', Thrift.Type.BYTE, 4);
    output.writeByte(this.n_gpu_use);
    output.writeFieldEnd();
  }
  if (this.tmp_opt_path !== null && this.tmp_opt_path !== undefined) {
    output.writeFieldBegin('tmp_opt_path', Thrift.Type.STRING, 5);
    output.writeString(this.tmp_opt_path);
    output.writeFieldEnd();
  }
  if (this.prescale !== null && this.prescale !== undefined) {
    output.writeFieldBegin('prescale', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.prescale);
    output.writeFieldEnd();
  }
  if (this.batch_size !== null && this.batch_size !== undefined) {
    output.writeFieldBegin('batch_size', Thrift.Type.BYTE, 7);
    output.writeByte(this.batch_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Response = module.exports.Response = function(args) {
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
Response.prototype = {};
Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.code = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Response.prototype.write = function(output) {
  output.writeStructBegin('Response');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.BYTE, 1);
    output.writeByte(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

